#!/usr/bin/perl

#use Data::Dumper;
use strict;

my $mode;

my $moviepath;
my $subspath;
my $audiopath;
my $needed_episode;
my $other_opts;

if (!($ARGV[0] =~ /^-both.*/) && !($ARGV[0] =~ /^-aud.*/) && ! ($ARGV[0] =~ /^-aud.*/) && ! ($ARGV[0] =~ /^-sub.*/)) {
	print "\nThis tool searches for randomly named external files and starts mpv player\n\n";
	print "For external audio:\n\$ anime-tool -audio '/path/to/video/folder' '/path/to/audio/folder' EPISODE_NUMBER\n\n";
	print "For external subs:\n\$ anime-tool -subs '/path/to/video/folder' '/path/to/subs/folder' EPISODE_NUMBER\n\n";
	print "For both:\n\$ anime-tool -both '/path/to/video/folder' '/path/to/audio/folder' '/path/to/subs/folder' EPISODE_NUMBER\n\n";
	print "Example:\n\$ anime-tool -subs '~/Downloads/yoi-collection' '~/Downloads/yoi-collection/subs-rus' 69\n\n";
	print "You need to specify episode number with leading zeroes like in original files!!!\n\n";
	exit;
}

if ($ARGV[0] =~ /^-sub.*/) {
	print "Using external subtitles\n";
	$mode = "subs";
	$moviepath = $ARGV[1];
	$subspath = $ARGV[2];
	$needed_episode = $ARGV[3];
	#$other_opts = $ARV[4] . " " . $ARGV[5];
} 
if ($ARGV[0] =~ /^-aud.*/) {
	print "Using external audio file\n";
	$mode = "audio";
	$moviepath = $ARGV[1];
	$audiopath = $ARGV[2];
	$needed_episode = $ARGV[3];
} 
if ($ARGV[0] =~ /^-both.*/) {
	print "Using both audio and subs\n";
	$mode = "audiosubs";
	$moviepath = $ARGV[1];
	$audiopath = $ARGV[2];
	$subspath = $ARGV[3];
	$needed_episode = $ARGV[4];
}



# getting movie data
print "Finding movies numbers:";
my %hashed_movies = insaneFindFiles(sort(grep(/.+[.](mkv|avi)$/, getDirFiles($moviepath))));
my $episodename = $hashed_movies{$needed_episode};
my $videopath = $moviepath . "/" . $episodename;
my $subsargs = "";
my $audioargs = "";

if ($mode =~ /.*subs.*/) {
	print "Finding subs numbers:";
	my %hashed_subs = insaneFindFiles(sort grep(/.+[.](ass|srt)$/, getDirFiles($subspath)));
	my $subsname = $hashed_subs{$needed_episode};
	$subsargs = "--sub-file '" . $subspath . "/" . $subsname . "'";
}
if ($mode =~ /.*audio.*/) {
	print "Finding audio numbers:";
	my %hashed_audio = insaneFindFiles(sort grep(/.+[.](mka|mp3|flac|ogg|wav|aif)$/, getDirFiles($audiopath)));
	my $audioname = $hashed_audio{$needed_episode};
	$audioargs = "--audio-file '" . $audiopath . "/" . $audioname . "'";
}

my $mpvline = "mpv '$videopath' $audioargs $subsargs";
# yeah, we linked that shit
print "Executing: $mpvline\n";
system($mpvline);

sub getDirFiles {
	opendir my $dir, $_[0] or die "Cannot open directory: $!";
	my @files = readdir $dir;
	closedir $dir;
	return @files;
}

sub insaneFindFiles {
	my @filtered = @_;
	# finding number position
my $startposition = 0;
my $endposition = 0;
my $startedflag = -1;
my $number = -1;

foreach my $filename (@filtered)
{
	for my $i (0..length($filename)-1){
		# skipping till current found number position
		if ($i<$startposition) {
			next;
		}
		#print "position: $i; $startedflag\n";

    	my $char = substr($filename, $i, 1);
    	if ($char =~ /[0-9]/) {
    		#print "char: $char\n";
    		# maybe number starts here
    		if ($startedflag == -1) {
    			$startposition = $i;
    			$startedflag = 1;

    			#print $startposition . "\n";
    		} 
    		
    	} else {
    		# if receive character
    		#print "c";
    		if ($startedflag != -1) {
    			# if still seeking for number
    			$endposition = $i-1;
    			$startedflag = -1;

    			#print $endposition;
    			# maybe we found number, maybe not. Now exiting, check if we are right next loop
    			my $newnumber = substr($filename, $startposition, $endposition-$startposition +1);
    			#print "\nnumber: $newnumber\n";
    			if ($number <= $newnumber-1) {
    				# number incrementing, we may be correct
    				$number = $newnumber;
    				last;
    			} else {

    				#print "number is crap maybe nickname or other shit\n";
    				$number = -1;
    			}
    			
    		}
    	}
    	
	}
	
}

foreach my $filename (@filtered)
{
print substr($filename, $startposition, $endposition-$startposition + 1) . ",";
}
print "\n";

# generating array
my %hashed_episodes = ();

foreach my $filename (@filtered)
{
		my $episode_number = substr($filename, $startposition, $endposition-$startposition + 1);
		$hashed_episodes{$episode_number} = escape_crap($filename);
}

return %hashed_episodes;
}

sub escape_crap {
	# that's real crap, not a fix
	$_[0] =~ s/[']/'"'"'/g;
	return $_[0];
}